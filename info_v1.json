
/* Пока без аутентификации-авторизации */
/* Сейчас считаем, что userId = 42 фронт уже "знает" */
/*Получение настроек подключения пользователя*/
GET 
/api/v1/settings/<userId>

Response:
{
	"name": "Ivan Petrov",
	"url": "https://hostedredmine.com",
	"apikey": "string",
	"projectList": [
		{"projectName":"project1","projectId": "project1Id"},
		{"projectName":"project2","projectId": "project2Id"},
		{"projectName":"project3","projectId": "project3Id"},
		]
}

/*Получение итераций проекта*/
GET 
/api/v1/project/iterations/<projectId>
{
	"projectId": "projectId1",
	"projectIterations": ["Iteration1","Iteration2","Iteration3"]
}

/*Получить настройки проверки*/
GET
/api/v1/robotSettings
{
    "showErrorResponse": true,
    "checkAllIterations": false,
    "needLint": true,
    "assignTasksToStudent": true
}

/*Задать настройки проверки*/
PUT
/api/v1/robotSettings
body:
{
    "showErrorResponse": true,
    "checkAllIterations": false,
    "needLint": true,
    "assignTasksToStudent": true
}

/*Начать проверку всех задач*/
POST
/api/v1/issueChecker/startFullCheck
{
    "projectId": "project1Id",
    "iteration": "iteration",
    "settings":
    {	
		"checkAllIterations": false,
		"showErrorResponse": true,
		"needLint": true,
		"assingTasksToStudent": true
    }
}

/*Начать проверку одной задачи*/
POST
/api/v1/issueChecker/startCheckSingleIssue
{
    "taskId": "12345",
    "projectId": "project1Id",
    "settings":
    {	
		"checkAllIterations": false,
		"showErrorResponse": true,
		"needLint": true,
		"assingTasksToStudent": true
    }
}


/*получить списки студентов выбранного проекта по projectId*/
GET
/api/v1/issueChecker/getStudentsList/<projectId>

Response:
{
    "studentList": [
        {
            "studentId": "12345",
            "studentName": "Иванов Иван"
        },
        {
            "studentId": "12346",
            "studentName": "Петров Петр"
        },
        {
            "studentId": "12347",
            "studentName": "Кузнецов Слава"
        }
    ]
}

/* Получить готовые к выдаче задачи в projectName и iterationId */
GET
/api/v1/issueChecker/getTasksList/<projectId>/<iterationId>

Response:
{
    "tasksList": [
        {
            "taskId": "12345",
            "taskSubject": "Шашки"
        },
        {
            "taskId": "12346",
            "taskSubject": "МКАД"
        },
        {
            "taskId": "12347",
            "taskSubject": "Последнее слово"
        }
    ]
}



/*назначить выделенное или раскопировать всё всем - создать и назначить каждую задачу на каждого из списка студентов*/
/api/v1/issueChecker/assignTasksToStudents/<IterationId>
POST
{
    "tasksList" : [{"taskId":"12345", "taskSubject":"Шашки"}],
    "studentList":  [{"studentId": "123457", "studentName": "Пупкин Василий"}]
}

/*Получение тем */
GET
/api/v1/tasks/getAllTopics
Response:
{
    "themeListList": [
        {
            "themeName": "Простая арифметика", "themeId": "1"
        },
        {
            "themeName": "Рекурсия", "themeId": "2"
        },
        {
            "themeName": "Функциональное программирование", "themeId": "3"
        }
    ]
}

/*Получение задач (в зависимости от темы)*/
GET
/api/v1/tasks/getTasks/<themeId>
Response:
{
    "theme": {"themeName": "Простая арифметика","themeId": "1"},
    "tasksInTheme": [
        {
            "taskSubject": "МКАД",
            "taskId": "12345",
            "taskDescription": "Василий ехал по МКАД со скоростью V. L - Длина МКАДА.",
            "themeId": "1",
            "folderName": "mkad"
        },
        {
            "taskSubject": "Складирование ноутбуков",
            "taskId": "54321",
            "taskDescription": "Ноутбуки лежат на складе. Лежат себе и лежат.",
            "themeId": "1",
            "folderName": "notebooks"
        }
    ]
}

/*Получение тестов (в зависимости от задачи)*/
GET
Response:
/api/v1/tasks/getTests/<taskId>
{
    "taskId": "1",
    "taskTests": [
        {
            "testId": 1,
            "inputData": "1 1 1",
            "outPutData": "3"
        },
        {
            "testId": 2,
            "inputData": "1 \n 1",
            "outPutData": "2"
        }
    ]
}

/* добавление новой задачи */
PUT
/api/v1/tasks/addTask
Request:
{
    "themeId": "1",
    "taskName": "h",
    "taskDescription": "asd"
    "listOfTests": [
        {"testId": "testId1", "inputData": "1 1 1", "outPutData": "3"},
        {"testId": "testId2", "inputData": "1 2 3"},"outPutData": "1 2 3"},
        {"testId": "testId3", "inputData": "1 \n 1", "outPutData": ""}
    ]
}
Response:
{
	"taskId": "taskId1",
}

/*добавление нового теста*/
PUT
/api/v1/addTest/<taskId>
Request:
{
    "taskId": "1",
    "inputData": "h",
    "outPutData": "asd"
}

/*добавление известной задачи к себе в итерацию проекта*/
POST
/api/v1/addIssue
Request:
{
    "taskId": "taskId1",
    "iterationId": "IterationId",
}